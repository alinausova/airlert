{"version":3,"sources":["assets/logogrey.svg","components/Layout/Header.tsx","components/Legend.tsx","components/Chart.tsx","components/JMapView.jsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Header","className","src","logoGray","alt","Legend","Chart","scale","x","height","padding","top","bottom","left","right","style","data","fill","filtered_data_300sec","map","el","Date","timestamp","y","Number","voc","pm10","co2","JMapView","realGeojson","type","features","filteredData4sec","properties","percentile","quality","pm25","nox","geometry","coordinates","parseFloat","lon","lat","useState","width","latitude","longitude","zoom","viewport","setViewport","mapStyle","onViewportChange","mapboxApiAccessToken","maxWidth","unit","color","opacity","id","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be494b1f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logogrey.eecfee84.svg\";","import React from 'react';\nimport logoGray from \"../../assets/logogrey.svg\"\nimport logoWhite from \"../../assets/logowhite.svg\"\nimport { MenuIcon } from '@heroicons/react/solid'\n\n\nexport function Header() {\n\n  return (\n    // <div className=\"flex w-full justify-between p-2 items-center bg-gradient-to-r from-blue-400 via-green-300 to-gray-100 bg-opacity-70\">\n    //   <div className=\"-mb-8 -mt-10\">\n    //     <img className=\"h-32\" src={logoWhite} alt=\"logo\"/>\n    //   </div>\n    //\n    //   <MenuIcon className=\"h-7 pr-3 text-gray-700\"/>\n    // </div>\n\n    <div className=\"flex w-full justify-between p-2 items-center absolute z-50\">\n      <div className=\"-mb-8 -mt-10\">\n        <img className=\"h-32\" src={logoGray} alt=\"logo\"/>\n      </div>\n\n      {/*<MenuIcon className=\"h-7 pr-3 text-gray-700\"/>*/}\n    </div>\n\n    // <div className=\"flex w-full justify-between p-2 items-center \">\n    //   <div className=\"-mb-8 -mt-10\">\n    //     <img className=\"h-32\" src={logoGray} alt=\"logo\"/>\n    //   </div>\n    //\n    //   <MenuIcon className=\"h-7 pr-3 text-gray-700\"/>\n    // </div>\n  );\n}","import React from 'react';\n\nexport function Legend() {\n\n  return (\n    <div className=\"flex w-full items-end justify-start\">\n      <div className=\"flex flex-col items-center text-xs\">\n        <div className=\"flex\">\n          <span className=\"w-12 h-1 bg-pink-700 \"/>\n          <span className=\"w-12 h-1 bg-pink-700\"/>\n        </div>\n        poor\n      </div>\n      <div className=\"flex flex-col items-center text-xs\">\n        <div className=\"flex\">\n          <span className=\"w-12 h-1 bg-red-400\"/>\n          <span className=\"w-12 h-1 bg-red-400\"/>\n        </div>\n        very low\n      </div>\n      <div className=\"flex flex-col items-center text-xs\">\n        <div className=\"flex\">\n          <span className=\"w-12 h-1 bg-yellow-500\"/>\n          <span className=\"w-12 h-1 bg-yellow-500\"/>\n        </div>\n        low\n      </div>\n      <div className=\"flex flex-col items-center text-xs\">\n        <div className=\"flex\">\n          <span className=\"w-12 h-1 bg-yellow-300\"/>\n          <span className=\"w-12 h-1 bg-yellow-300\"/>\n        </div>\n        moderate\n      </div>\n      <div className=\"flex flex-col items-center text-xs\">\n        <div className=\"flex\">\n          <span className=\"w-12 h-1 bg-green-300\"/>\n          <span className=\"w-12 h-1 bg-green-300\"/>\n        </div>\n        good\n      </div>\n      <div className=\"flex flex-col items-center text-xs\">\n        <div className=\"flex\">\n          <span className=\"w-12 h-1 bg-blue-300\"/>\n          <span className=\"w-12 h-1 bg-blue-300\"/>\n        </div>\n        excellent\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport {VictoryBar, VictoryChart, VictoryLine} from \"victory\"\nimport filtered_data_300sec from \"../data/filtered_data_300sec.json\"\n\nexport function Chart() {\n\n  const data300secVoc = () => filtered_data_300sec.map((el) => {\n    return { x: new Date(el.timestamp), y: Number(el.voc) }\n  })\n\n  const data300secPm25 = () => filtered_data_300sec.map((el) => {\n    return { x: new Date(el.timestamp), y: Number(el[\"pm2.5\"]) }\n  })\n\n  const data300secPm10 = () => filtered_data_300sec.map((el) => {\n    return { x: new Date(el.timestamp), y: Number(el.pm10) }\n  })\n\n  const data300secNox = () => filtered_data_300sec.map((el) => {\n    return { x: new Date(el.timestamp), y: Number(el.co2) }\n  })\n\n  return (\n    <div className=\"flex w-full space-around p-2 items-center mt-10\">\n      <div className=\"p-4\">\n        <VictoryChart\n          scale={{x: 'time'}}\n          height={400}\n\n          padding={{top: 0, bottom: 40, left: 0, right: 0}}\n        >\n          <VictoryBar\n            style={{ data: { fill: \"#31c4ae\" } }}\n            data={data300secVoc()}\n          />\n        </VictoryChart>\n      </div>\n\n      <div className=\"p-4\">\n        <VictoryChart\n          scale={{x: 'time'}}\n          height={400}\n\n          padding={{top: 0, bottom: 40, left: 0, right: 0}}\n        >\n          <VictoryBar\n            style={{ data: { fill: \"#83e576\" } }}\n            data={data300secPm25()}\n          />\n        </VictoryChart>\n      </div>\n\n      <div className=\"p-4\">\n        <VictoryChart\n          scale={{x: 'time'}}\n          height={400}\n          padding={{top: 0, bottom: 40, left: 0, right: 0}}\n        >\n          <VictoryBar\n            style={{ data: { fill: \"#dedb43\" } }}\n            data={data300secPm10()}\n          />\n        </VictoryChart>\n      </div>\n\n      <div className=\"p-4\">\n        <VictoryChart\n          scale={{x: 'time'}}\n          height={400}\n          padding={{top: 0, bottom: 40, left: 0, right: 0}}\n        >\n          <VictoryBar\n            style={{ data: { fill: \"#e7c857\" } }}\n            data={data300secNox()}\n          />\n        </VictoryChart>\n      </div>\n    </div>\n  );\n}","import * as React from 'react';\nimport { useState } from 'react';\nimport MapGl, {NavigationControl, ScaleControl, FullscreenControl, Layer, Source} from 'react-map-gl';\nimport filteredData4sec from \"../data/filtered_data_4sec.json\"\nimport {Legend} from \"./Legend\";\nimport {Chart} from \"./Chart\";\n\n\nexport const mapAccessToken = 'pk.eyJ1IjoiYWxpbmF1c292YSIsImEiOiJja3FzNXBhbzQxbjZ1MnducG1ha2JibXkyIn0.RBNyK-wDRQpFj_8yDARbSA'\n\nconst geolocateStyle = {\n  top: 0,\n  left: 0,\n  margin: 10\n};\nconst positionOptions = {enableHighAccuracy: true};\n\nexport function JMapView() {\n\n  const geojsonFeature = {\n    type: 'Feature',\n    properties: {\n      name: 'Coors Field',\n      amenity: 'Baseball Stadium',\n      popupContent: 'This is where the Rockies play!'\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [-104.99404, 39.75621]\n    }\n  };\n\n//voc and co2 made a lot of difference\n  const getAirQualityWithCO2 = (pm25, pm10, nox, voc, co2) => {\n    if (pm25 > 60 || pm10 > 100|| voc > 300 || co2 > 2000) {\n      return 5\n    } else if (pm25 > 24 || pm10 > 50|| voc > 200 || co2 > 1800) {\n      return 4\n    } else if (pm25 > 20 || pm10 > 35|| voc > 150 || co2 > 1400) {\n      return 3\n    } else if (pm25 > 10 || pm10 > 15 || voc > 100 || co2 > 1000) {\n      return 2\n    } else if (pm25 > 5 || pm10 > 9 || voc > 50 || co2 > 700) {\n      return 1\n    } else {\n      return 0\n    }\n  }\n\n  const getAirQuality = (pm25, pm10, nox, voc, co2) => {\n    if (pm25 > 60 || pm10 > 100|| voc > 300) {\n      return 5\n    } else if (pm25 > 24 || pm10 > 50|| voc > 200) {\n      return 4\n    } else if (pm25 > 20 || pm10 > 35|| voc > 150) {\n      return 3\n    } else if (pm25 > 10 || pm10 > 15 || voc > 100) {\n      return 2\n    } else if (pm25 > 5 || pm10 > 9 || voc > 50) {\n      return 1\n    } else {\n      return 0\n    }\n  }\n\n  const realGeojson = {\n    type: 'FeatureCollection',\n    features: filteredData4sec.map((el) => {\n      return {type: 'Feature', properties: {percentile: 0, quality: getAirQuality(el[\"pm2.5\"], el.pm10, el.nox, el.voc, el.co2), timestamp: el.timestamp}, geometry: {type: 'Point', coordinates: [parseFloat(el.lon), parseFloat(el.lat)]}}\n    })\n  }\n\n  const layerStyle = {\n    id: 'point',\n    type: 'circle',\n    paint: {\n      'circle-radius': 10,\n      'circle-color': '#007cbf'\n    }\n  };\n\n  const layerStylePoints = {\n    id: 'point',\n    type: 'circle',\n    'paint': {\n// Make circles larger as the user zooms from z12 to z22.\n      'circle-radius': {\n        'base': 1.75,\n        'stops': [\n          [9, 2],\n          [19, 180]\n        ]\n      },\n      'circle-opacity': 0.5,\n      'circle-blur': 0.9,\n// Color circles by ethnicity, using a `match` expression.\n      'circle-color':\n      [\n        'match',\n        ['get', 'quality'],\n        0,\n        '#3bc5fb',\n        1,\n        '#4aff96',\n        2,\n        '#ffd769',\n        3,\n        '#e08c10',\n        4,\n        '#e04f4f',\n        5,\n        '#853774',\n        /* other */ '#777777'\n      ]\n    }\n  };\n\n  const [viewport, setViewport] = useState({\n    width: 400,\n    height: 400,\n    latitude: 48.137154,\n    longitude: 11.576124,\n    zoom: 12\n  });\n\n  const navControlStyle= {\n    right: 20,\n    top: 60\n  };\n\n  const scaleControlStyle= {\n    right: 60,\n    bottom: 8,\n    color: 'gray',\n    opacity: 0.6\n  };\n\n  const fullscreenControlStyle= {\n    right: 20,\n    top: 10\n  };\n\n  // @ts-ignore\n  return (\n    <div className=\"relative bg-white flex\">\n      <div className=\"\">\n    <MapGl\n      {...viewport}\n      width='100vw'\n      height='80vh'\n      mapStyle=\"mapbox://styles/mapbox/light-v9\"\n      onViewportChange={setViewport}\n      mapboxApiAccessToken={mapAccessToken}\n    >\n      <NavigationControl style={navControlStyle} />\n      <ScaleControl maxWidth={100} unit=\"metric\" style={scaleControlStyle} />\n      <FullscreenControl style={fullscreenControlStyle} />\n      <Source id=\"my-data2\" type=\"geojson\" data={realGeojson}>\n        <Layer {...layerStylePoints}/>\n      </Source>\n    </MapGl>\n        <Legend/>\n        {/*<div className=\"flex flex-col absolute z-50 bottom-20 m-4\">*/}\n        {/*  <button className=\"rounded h-10 m-1 bg-blue-400\">*/}\n        {/*    <span className=\"p-6 text-white font-semibold\">*/}\n        {/*      Air Quality*/}\n        {/*    </span>*/}\n        {/*  </button>*/}\n\n        {/*  <button className=\"rounded border-2 border-gray-500 h-10 m-1\">*/}\n        {/*    <span className=\"p-6\">*/}\n        {/*      PM2.5*/}\n        {/*    </span>*/}\n        {/*  </button>*/}\n        {/*  <button className=\"rounded border-2 border-gray-500 h-10 m-1\">*/}\n        {/*    <span className=\"p-6\">*/}\n        {/*      VOCx*/}\n        {/*    </span>*/}\n        {/*  </button>*/}\n\n\n        {/*</div>*/}\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport \"tailwindcss/tailwind.css\"\nimport {Header} from \"./components/Layout/Header\";\nimport {JMapView} from \"./components/JMapView\";\nimport {Chart} from \"./components/Chart\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport {Landing} from \"./components/Landing\";\n\nfunction App() {\n  return (\n          <div className=\"bg-white text-gray-700 h-screen\">\n            <Header/>\n            <JMapView/>\n            <Chart/>\n          </div>\n    // <Router>\n    //   <Switch>\n    //     <Route exact path=\"/map\">\n    //       <div className=\"bg-white text-gray-700 h-screen\">\n    //         <Header/>\n    //         <JMapView/>\n    //         <Chart/>\n    //       </div>\n    //     </Route>\n    //\n    //     <Route path=\"/\">\n    //       <Landing/>\n    //     </Route>\n    //   </Switch>\n    // </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}